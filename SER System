import os
import librosa
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score

# Function to extract features from audio files
def extract_features(file_path):
    try:
        # Load audio file
        audio, sr = librosa.load(file_path, res_type='kaiser_fast')

        # Extract features (MFCCs: Mel-frequency cepstral coefficients)
        mfccs = librosa.feature.mfcc(y=audio, sr=sr, n_mfcc=40)
        mfccs_mean = np.mean(mfccs.T, axis=0)

        return mfccs_mean
    except Exception as e:
        print("Error encountered while parsing file: ", file_path)
        return None

# Load dataset
data_path = "RAVDESS/"
emotions = {
    '01': 'neutral',
    '02': 'calm',
    '03': 'happy',
    '04': 'sad',
    '05': 'angry',
    '06': 'fearful',
    '07': 'disgust',
    '08': 'surprised'
}
X, y = [], []
for subdir, dirs, files in os.walk(data_path):
    for file in files:
        if file.endswith('.wav'):
            file_path = os.path.join(subdir, file)
            emotion = emotions[file.split("-")[2]]
            feature = extract_features(file_path)
            if feature is not None:
                X.append(feature)
                y.append(emotion)

# Convert lists to numpy arrays
X = np.array(X)
y = np.array(y)

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a classifier (Multilayer Perceptron)
model = MLPClassifier(hidden_layer_sizes=(100,), max_iter=300, activation='relu', solver='adam', random_state=42)
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy: {:.2f}%".format(accuracy * 100))
